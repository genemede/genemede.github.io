{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Genemede Welcome to the GENEMEDE documentation. GENEMEDE (GEneric NEuro MEtadata DEscriptors) is a generic metadata framework that may be used to comprehensively describe a neuroscience experiment. The tool and the website is still a work in progress, so please expect a lot of changes. Funding This project was made possible through the support of a grant from Templeton World Charity Foundation, Inc. The opinions expressed in this publication(website) are those of the author(s) and do not necessarily reflect the views of Templeton World Charity Foundation, Inc. The tool has been developed as a part of the ARC-Cogitate project.","title":"Genemede"},{"location":"#genemede","text":"Welcome to the GENEMEDE documentation. GENEMEDE (GEneric NEuro MEtadata DEscriptors) is a generic metadata framework that may be used to comprehensively describe a neuroscience experiment. The tool and the website is still a work in progress, so please expect a lot of changes.","title":"Genemede"},{"location":"#funding","text":"This project was made possible through the support of a grant from Templeton World Charity Foundation, Inc. The opinions expressed in this publication(website) are those of the author(s) and do not necessarily reflect the views of Templeton World Charity Foundation, Inc. The tool has been developed as a part of the ARC-Cogitate project.","title":"Funding"},{"location":"about/","text":"Genemede What is Genemede Genemede aims to provide the means to build ontologies for general purpose data, in turn allowing the creation of a comprehensive ontology for describing neuroscience research projects, along with a set of tools to record, search and interact with data using standardized rules. Using a common ontology for data will allow communities to easily search and share information. It is comprised of the following components: The GAT The GAT - Genemede Api and Tools - is a python project meant to be run locally. It will store data and allow for several operations, including search and export. Repository at github More in-depth information here . The GUI The GUI is a Web Application used to interact with the GAT APIs. Repository at github It is a vue.js application, and you can build it yourself or you can use our own public deployment here More in-depth information here . The HUB (in development) The HUB is an online platform meant to facilitate the exchange of information such as ontologies. Repository at github More in-depth information here . The Genemede Metatypes (in development) This is a collection of officially curated metatypes by the Genemede project. Repository at github More in-depth information here . What can Genemede do Create researchers, subjects, projects and labs; Edit relationships between created objects; Search data and view relationships; Export all data as a Genemede json file. How to install Genemede Installing the GAT Download the repository via github git clone https://github.com/genemede/gnmd-gat and follow the instructions on the README file. Installing and building the GUI Download the repository via github git clone https://github.com/genemede/gnmd-gui and follow the instructions on the README file.","title":"About"},{"location":"about/#genemede","text":"","title":"Genemede"},{"location":"about/#what-is-genemede","text":"Genemede aims to provide the means to build ontologies for general purpose data, in turn allowing the creation of a comprehensive ontology for describing neuroscience research projects, along with a set of tools to record, search and interact with data using standardized rules. Using a common ontology for data will allow communities to easily search and share information. It is comprised of the following components:","title":"What is Genemede"},{"location":"about/#the-gat","text":"The GAT - Genemede Api and Tools - is a python project meant to be run locally. It will store data and allow for several operations, including search and export. Repository at github More in-depth information here .","title":"The GAT"},{"location":"about/#the-gui","text":"The GUI is a Web Application used to interact with the GAT APIs. Repository at github It is a vue.js application, and you can build it yourself or you can use our own public deployment here More in-depth information here .","title":"The GUI"},{"location":"about/#the-hub","text":"(in development) The HUB is an online platform meant to facilitate the exchange of information such as ontologies. Repository at github More in-depth information here .","title":"The HUB"},{"location":"about/#the-genemede-metatypes","text":"(in development) This is a collection of officially curated metatypes by the Genemede project. Repository at github More in-depth information here .","title":"The Genemede Metatypes"},{"location":"about/#what-can-genemede-do","text":"Create researchers, subjects, projects and labs; Edit relationships between created objects; Search data and view relationships; Export all data as a Genemede json file.","title":"What can Genemede do"},{"location":"about/#how-to-install-genemede","text":"","title":"How to install Genemede"},{"location":"about/#installing-the-gat","text":"Download the repository via github git clone https://github.com/genemede/gnmd-gat and follow the instructions on the README file.","title":"Installing the GAT"},{"location":"about/#installing-and-building-the-gui","text":"Download the repository via github git clone https://github.com/genemede/gnmd-gui and follow the instructions on the README file.","title":"Installing and building the GUI"},{"location":"components/","text":"Components of Genemde The GAT The GAT - Genemede Api and Tools - is a python project meant to be run locally. It will store data and allow for several operations, including search and export. Sometime during the development of Genemede, the GAT will be turned into an installable python package, but for now it needs to be installed and configured as a normal python repository. The GAT acts as the brain for all your local functionality. It holds the available metadata types and all the data, it provides an api to interact with it and it also has a set of command line tools to help you manage everything. Folders The first time the GAT runs, it will create a genemede folder under your local user folder. There you will find this folder structure: genemede \u251c\u2500\u2500 data \u251c\u2500\u2500 logs \u251c\u2500\u2500 media \u251c\u2500\u2500 mtypes \u2502 \u251c\u2500\u2500 imported \u2502 \u2514\u2500\u2500 user \u251c\u2500\u2500 scratch \u2514\u2500\u2500 config.json data is where all the local data is stored; logs is where all the operating log files are stored; media is where all the uploaded files are stored ( (uploading is still under development) ); mtypes holds non-curated metadata types. You can freely create your own metadata types under the user folder, and the imported folder is reserved for future use. scratch holds temporary files, such as exported json files and debug dumps. It is safe to delete anything inside this folder. Configuration These are the contents of the current configuration file: { \"json_indent\": 4, \"user\": { \"name\": \"default user\", \"screen_name\": \"default user\", \"workspace\": \"genemede\", \"email\": \"example@example.com\" }, \"folders\": { \"user_data\": \"<homefolder>/genemede/data\", \"user_media\": \"<homefolder>/genemede/media\", \"user_scratch\": \"<homefolder>/genemede/scratch\", \"system_mtypes\": \"<gat_repo_folder>/system/mtypes\", \"user_mtypes\": \"<homefolder>/genemede/mtypes/user\", \"imported_mtypes\": \"<homefolder>/genemede/mtypes/imported\", \"global_sources\": \"<gat_repo_folder>/system/sources\", \"logfiles\": \"<homefolder>/genemede/logs\", \"user_deleted_data\": \"<homefolder>/genemede/data/_deleted\" } } We don't recommend changing anything except the ```user``` section at this time. Your screen_name will be displayed in the GUI, and the GUI will try to use your email to display a Gravatar image if you have one configured. The workspace field will be used in the future to differentiate different data workspaces, and the name field will be used for authentication in the HUB when available. A nicer way to change configuration values is being developed in the GUI, but in the meantime the only way to change configuration values is to edit the json file manually. MTypes Currently, the Genemede metadata types are included in the GAT itself ( see The Metadata types ). You can create your own metadata types under the user_mtypes folder (default /genemede/mtypes/user). The GUI As the functionality of Genemede is relatively complex, it would be unwieldy to work exclusively through a command line interface or API. The GUI app provides a frontend for most of the system functionality, using the underlying GAT api, and storing no data at all . The HUB Currently in development, the Genemede HUB will be a central point to share and search data made available by any Genemede user that decides to make their data available to the public. The Metadata types Metadata types are the core of Genemede. Each metadata type defines a field structure and the rules on how a metadata type interacts and links with other types. The Genemede project will maintain a curated list of metadata types tailored for neuroscience but any user can create their own metadata types. During the initial development phase, the curated metadata types are included in the GAT repository, but will eventually be moved out into their own repository.","title":"Components"},{"location":"components/#components-of-genemde","text":"","title":"Components of Genemde"},{"location":"components/#the-gat","text":"The GAT - Genemede Api and Tools - is a python project meant to be run locally. It will store data and allow for several operations, including search and export. Sometime during the development of Genemede, the GAT will be turned into an installable python package, but for now it needs to be installed and configured as a normal python repository. The GAT acts as the brain for all your local functionality. It holds the available metadata types and all the data, it provides an api to interact with it and it also has a set of command line tools to help you manage everything.","title":"The GAT"},{"location":"components/#folders","text":"The first time the GAT runs, it will create a genemede folder under your local user folder. There you will find this folder structure: genemede \u251c\u2500\u2500 data \u251c\u2500\u2500 logs \u251c\u2500\u2500 media \u251c\u2500\u2500 mtypes \u2502 \u251c\u2500\u2500 imported \u2502 \u2514\u2500\u2500 user \u251c\u2500\u2500 scratch \u2514\u2500\u2500 config.json data is where all the local data is stored; logs is where all the operating log files are stored; media is where all the uploaded files are stored ( (uploading is still under development) ); mtypes holds non-curated metadata types. You can freely create your own metadata types under the user folder, and the imported folder is reserved for future use. scratch holds temporary files, such as exported json files and debug dumps. It is safe to delete anything inside this folder.","title":"Folders"},{"location":"components/#configuration","text":"These are the contents of the current configuration file: { \"json_indent\": 4, \"user\": { \"name\": \"default user\", \"screen_name\": \"default user\", \"workspace\": \"genemede\", \"email\": \"example@example.com\" }, \"folders\": { \"user_data\": \"<homefolder>/genemede/data\", \"user_media\": \"<homefolder>/genemede/media\", \"user_scratch\": \"<homefolder>/genemede/scratch\", \"system_mtypes\": \"<gat_repo_folder>/system/mtypes\", \"user_mtypes\": \"<homefolder>/genemede/mtypes/user\", \"imported_mtypes\": \"<homefolder>/genemede/mtypes/imported\", \"global_sources\": \"<gat_repo_folder>/system/sources\", \"logfiles\": \"<homefolder>/genemede/logs\", \"user_deleted_data\": \"<homefolder>/genemede/data/_deleted\" } } We don't recommend changing anything except the ```user``` section at this time. Your screen_name will be displayed in the GUI, and the GUI will try to use your email to display a Gravatar image if you have one configured. The workspace field will be used in the future to differentiate different data workspaces, and the name field will be used for authentication in the HUB when available. A nicer way to change configuration values is being developed in the GUI, but in the meantime the only way to change configuration values is to edit the json file manually.","title":"Configuration"},{"location":"components/#mtypes","text":"Currently, the Genemede metadata types are included in the GAT itself ( see The Metadata types ). You can create your own metadata types under the user_mtypes folder (default /genemede/mtypes/user).","title":"MTypes"},{"location":"components/#the-gui","text":"As the functionality of Genemede is relatively complex, it would be unwieldy to work exclusively through a command line interface or API. The GUI app provides a frontend for most of the system functionality, using the underlying GAT api, and storing no data at all .","title":"The GUI"},{"location":"components/#the-hub","text":"Currently in development, the Genemede HUB will be a central point to share and search data made available by any Genemede user that decides to make their data available to the public.","title":"The HUB"},{"location":"components/#the-metadata-types","text":"Metadata types are the core of Genemede. Each metadata type defines a field structure and the rules on how a metadata type interacts and links with other types. The Genemede project will maintain a curated list of metadata types tailored for neuroscience but any user can create their own metadata types. During the initial development phase, the curated metadata types are included in the GAT repository, but will eventually be moved out into their own repository.","title":"The Metadata types"},{"location":"mtypes/","text":"Metadata Types Description for metadata types File Format File format","title":"Metadata Types"},{"location":"mtypes/#metadata-types","text":"Description for metadata types","title":"Metadata Types"},{"location":"mtypes/#file-format","text":"File format","title":"File Format"},{"location":"tutorial/","text":"Getting Started with Genemede This aims to be a comprehensive tutorial on how to get Genemede up and running on your computer. As Genemede is currently in active development, this guide can sometimes be slightly out of date. Setting up the GAT Clone the repository at github Setup a python virtual environment cd gnmd-gat python -m venv env source env/bin/activate | env\\Scripts\\activate.bat `(if on windows)` pip install -r requirements.txt If you want to create fake data for testing, follow these steps: Create a .env file on the project root or copy .env.example to .env Set ALLOW_NUKER=1 and ALLOW_FAKER=1 on the .env file Create fake data by running python util.py faker Using the GAT You can check out the available command-line options with python util.py The GAT is a flask application, and as such you can list all available API routes using flask routes To start the API server, enter python serve.py Using the GUI You can run your own build of the GUI, or you can use our own public deployment here . The Home Tab When you open the GUI application, it will try to connect to your local GAT. If successful, you will see a green checkmark along with your user information and avatar on the top right of the screen. If the GUI fails to connect to the GAT, there will instead be a red icon on the user information area. On the GUI homepage there will be a button that allows you to retry the connection: If all went well, you will now have several buttons that allow you to directly create an instance of the default metadata types: Clicking on any of these will take you to the appropriate form. You can then fill in the values and save the record. The Data Tab The Data tab is the main point of entry to all of the available data. You can create new records, see various statistics about your data, search on individual metadata types and export all your data to a single genemede json file. The Search Tab For now, there is only a simple text search on all the data. You can enter any text and press the search button to navigate on the results. On each row, the details button will open the corresponding form for the record. Genemede Forms The Genemede forms allow a wide range of data types, mirroring the specifications on the underlying metadata definitions. Short and long text fields These are simple text values, and the choice of a single or a multi line editor is given by the metadata type definition. Date and time fields For entering values such as dates, times and timestamps. More user-friendly editors are being developed to allow entering various combinations of dates, times and timestamps, but for now they are simple text editors with the value in ISO format. Boolean fields Simple true/false selectors, although the true and false textual values can be defined by the underlying metadata type definition. More user-friendly editors are being developed to allow better functionality. Selection fields These are selectable values from a controlled data source, controlled by the metadata type definition. These fields only allow selecting a value from the corresponding data source. Link Fields These fields allows the creation of a link to another record. There can also be extra fields that can be used to further describe the nature of the link, defined by the underlying metadata type definition. Modules Modules are groups of fields than can be repeatable. They can include every other type of field except modules. Beta Testing Here's a brief, step-by-step guide on how to get acquainted with how Genemede works. Your feedback will be greatly appreciated. As you work through the following steps, please provide constructive feedback here . Step 1 Start by creating several researchers. The researcher metatype is used to define people that work in projects or laboratories. To start, create 3-4 researchers. TIP: give them recognizable names, because you will be using these records on a different metatype soon. You can do this by going to the Data tab and clicking create on the researcher group. Step 2 After you're done with creating researchers, go back to the Data tab and create 3-4 subjects . The subject metatype is used to define any subject of a project or experiment. As with researchers, they should have recognizable names, and a few will suffice, but of course you can create as many as you want. The subject metatype is a good example of how modules work. Some of the modules are still in development but you can experiment with the human , mpi and visual modules, which have some examples of selection fields. Step 3 Go back to the Data tab and create a lab record. On the lab metatype there is a members field that allows you to add links to the previously created researchers . You can use the add button on the Members field header to add a new item. Select a couple of your researchers and fill in the corresponding fields. Save the record, go back to the Data tab. Step 4 Create a new project . As with the lab record linking to researchers, you can create links to labs and subjects on a project . Any labs and subjects you created on the previous steps will be available for selection on the corresponding Labs and Subject fields. Step 5 Now that you created several data records, you can experiment with searching and filtering . If you select any metatype on the Data tab, you'll see a table of all existing records of that metatype, and you can do a simple name filter using the text box above the table. To try advanced search capabilities, head over to the Search page, where you can search for text in any field of any record. The GAT api supports specifiying metatypes and fields to search on, but that functionality isn't yet fully implemented in the GUI app. Step 6 And finally, you can export all your data to a Genemede json file. Head over to the Data tab, and you can find a button to do just that near the top of the page. Genemede will combine all your records into a single json file, that you can download and inspect.","title":"Tutorial"},{"location":"tutorial/#getting-started-with-genemede","text":"This aims to be a comprehensive tutorial on how to get Genemede up and running on your computer. As Genemede is currently in active development, this guide can sometimes be slightly out of date.","title":"Getting Started with Genemede"},{"location":"tutorial/#setting-up-the-gat","text":"Clone the repository at github Setup a python virtual environment cd gnmd-gat python -m venv env source env/bin/activate | env\\Scripts\\activate.bat `(if on windows)` pip install -r requirements.txt If you want to create fake data for testing, follow these steps: Create a .env file on the project root or copy .env.example to .env Set ALLOW_NUKER=1 and ALLOW_FAKER=1 on the .env file Create fake data by running python util.py faker","title":"Setting up the GAT"},{"location":"tutorial/#using-the-gat","text":"You can check out the available command-line options with python util.py The GAT is a flask application, and as such you can list all available API routes using flask routes To start the API server, enter python serve.py","title":"Using the GAT"},{"location":"tutorial/#using-the-gui","text":"You can run your own build of the GUI, or you can use our own public deployment here .","title":"Using the GUI"},{"location":"tutorial/#the-home-tab","text":"When you open the GUI application, it will try to connect to your local GAT. If successful, you will see a green checkmark along with your user information and avatar on the top right of the screen. If the GUI fails to connect to the GAT, there will instead be a red icon on the user information area. On the GUI homepage there will be a button that allows you to retry the connection: If all went well, you will now have several buttons that allow you to directly create an instance of the default metadata types: Clicking on any of these will take you to the appropriate form. You can then fill in the values and save the record.","title":"The Home Tab"},{"location":"tutorial/#the-data-tab","text":"The Data tab is the main point of entry to all of the available data. You can create new records, see various statistics about your data, search on individual metadata types and export all your data to a single genemede json file.","title":"The Data Tab"},{"location":"tutorial/#the-search-tab","text":"For now, there is only a simple text search on all the data. You can enter any text and press the search button to navigate on the results. On each row, the details button will open the corresponding form for the record.","title":"The Search Tab"},{"location":"tutorial/#genemede-forms","text":"The Genemede forms allow a wide range of data types, mirroring the specifications on the underlying metadata definitions. Short and long text fields These are simple text values, and the choice of a single or a multi line editor is given by the metadata type definition. Date and time fields For entering values such as dates, times and timestamps. More user-friendly editors are being developed to allow entering various combinations of dates, times and timestamps, but for now they are simple text editors with the value in ISO format. Boolean fields Simple true/false selectors, although the true and false textual values can be defined by the underlying metadata type definition. More user-friendly editors are being developed to allow better functionality. Selection fields These are selectable values from a controlled data source, controlled by the metadata type definition. These fields only allow selecting a value from the corresponding data source. Link Fields These fields allows the creation of a link to another record. There can also be extra fields that can be used to further describe the nature of the link, defined by the underlying metadata type definition. Modules Modules are groups of fields than can be repeatable. They can include every other type of field except modules.","title":"Genemede Forms"},{"location":"tutorial/#beta-testing","text":"Here's a brief, step-by-step guide on how to get acquainted with how Genemede works. Your feedback will be greatly appreciated. As you work through the following steps, please provide constructive feedback here .","title":"Beta Testing"},{"location":"tutorial/#step-1","text":"Start by creating several researchers. The researcher metatype is used to define people that work in projects or laboratories. To start, create 3-4 researchers. TIP: give them recognizable names, because you will be using these records on a different metatype soon. You can do this by going to the Data tab and clicking create on the researcher group.","title":"Step 1"},{"location":"tutorial/#step-2","text":"After you're done with creating researchers, go back to the Data tab and create 3-4 subjects . The subject metatype is used to define any subject of a project or experiment. As with researchers, they should have recognizable names, and a few will suffice, but of course you can create as many as you want. The subject metatype is a good example of how modules work. Some of the modules are still in development but you can experiment with the human , mpi and visual modules, which have some examples of selection fields.","title":"Step 2"},{"location":"tutorial/#step-3","text":"Go back to the Data tab and create a lab record. On the lab metatype there is a members field that allows you to add links to the previously created researchers . You can use the add button on the Members field header to add a new item. Select a couple of your researchers and fill in the corresponding fields. Save the record, go back to the Data tab.","title":"Step 3"},{"location":"tutorial/#step-4","text":"Create a new project . As with the lab record linking to researchers, you can create links to labs and subjects on a project . Any labs and subjects you created on the previous steps will be available for selection on the corresponding Labs and Subject fields.","title":"Step 4"},{"location":"tutorial/#step-5","text":"Now that you created several data records, you can experiment with searching and filtering . If you select any metatype on the Data tab, you'll see a table of all existing records of that metatype, and you can do a simple name filter using the text box above the table. To try advanced search capabilities, head over to the Search page, where you can search for text in any field of any record. The GAT api supports specifiying metatypes and fields to search on, but that functionality isn't yet fully implemented in the GUI app.","title":"Step 5"},{"location":"tutorial/#step-6","text":"And finally, you can export all your data to a Genemede json file. Head over to the Data tab, and you can find a button to do just that near the top of the page. Genemede will combine all your records into a single json file, that you can download and inspect.","title":"Step 6"},{"location":"developer/","text":"Developer Guide Info on structures etc. Metadata Types Data Sources","title":"Developer Guide"},{"location":"developer/#developer-guide","text":"Info on structures etc. Metadata Types Data Sources","title":"Developer Guide"},{"location":"developer/dev-metatypes/","text":"Template for mtype definition For developing mtypes name name \"name\": \"lab\" description description \"description\": \"Laboratory\" datatype included for consistency, is always mtype \"datatype\": \"mtype\" sources sources defined in the header \"sources\": { \"source_name\": { \"name\": \"Source display name\", \"description\": \"Source description\", \"codes\": [] } } properties list of fields modules list of grouped fields that can be enabled or disabled by the user","title":"Template for mtype definition"},{"location":"developer/dev-metatypes/#template-for-mtype-definition","text":"For developing mtypes","title":"Template for mtype definition"},{"location":"developer/dev-metatypes/#name","text":"name \"name\": \"lab\"","title":"name"},{"location":"developer/dev-metatypes/#description","text":"description \"description\": \"Laboratory\"","title":"description"},{"location":"developer/dev-metatypes/#datatype","text":"included for consistency, is always mtype \"datatype\": \"mtype\"","title":"datatype"},{"location":"developer/dev-metatypes/#sources","text":"sources defined in the header \"sources\": { \"source_name\": { \"name\": \"Source display name\", \"description\": \"Source description\", \"codes\": [] } }","title":"sources"},{"location":"developer/dev-metatypes/#properties","text":"list of fields","title":"properties"},{"location":"developer/dev-metatypes/#modules","text":"list of grouped fields that can be enabled or disabled by the user","title":"modules"},{"location":"developer/dev-sources/","text":"Sources Source for field editing and validation Standard Sources Sources curated and included with the project Metatype defined sources Sources defined by metatypes for use within the context","title":"Sources"},{"location":"developer/dev-sources/#sources","text":"Source for field editing and validation","title":"Sources"},{"location":"developer/dev-sources/#standard-sources","text":"Sources curated and included with the project","title":"Standard Sources"},{"location":"developer/dev-sources/#metatype-defined-sources","text":"Sources defined by metatypes for use within the context","title":"Metatype defined sources"},{"location":"reference/","text":"Reference Reference for current metatypes Metadata Types Data Sources","title":"Reference"},{"location":"reference/#reference","text":"Reference for current metatypes Metadata Types Data Sources","title":"Reference"},{"location":"reference/ref-metatypes/","text":"project Project Properties labs description: List of labs associated with the project. subjects description: List of subjects associated with the project. project_start_date description: Start date of the project. project_end_date description: End date of the project project_lead description: Name of the project leader / person responsible for the project. members description: Members of the project project_manager description: Name of the project manager. data_manager description: Name of the data manager. project_digital_tools description: List of digital tools used in the project. e.g. slack, slab, keeper, trello project_legacy_management description: Documentation that describes the legacy of the project and the data. This may include documents describing policies on how how the project and all related output will be maintained.","title":"project"},{"location":"reference/ref-metatypes/#project","text":"Project","title":"project"},{"location":"reference/ref-metatypes/#properties","text":"","title":"Properties"},{"location":"reference/ref-metatypes/#labs","text":"description: List of labs associated with the project.","title":"labs"},{"location":"reference/ref-metatypes/#subjects","text":"description: List of subjects associated with the project.","title":"subjects"},{"location":"reference/ref-metatypes/#project_start_date","text":"description: Start date of the project.","title":"project_start_date"},{"location":"reference/ref-metatypes/#project_end_date","text":"description: End date of the project","title":"project_end_date"},{"location":"reference/ref-metatypes/#project_lead","text":"description: Name of the project leader / person responsible for the project.","title":"project_lead"},{"location":"reference/ref-metatypes/#members","text":"description: Members of the project","title":"members"},{"location":"reference/ref-metatypes/#project_manager","text":"description: Name of the project manager.","title":"project_manager"},{"location":"reference/ref-metatypes/#data_manager","text":"description: Name of the data manager.","title":"data_manager"},{"location":"reference/ref-metatypes/#project_digital_tools","text":"description: List of digital tools used in the project. e.g. slack, slab, keeper, trello","title":"project_digital_tools"},{"location":"reference/ref-metatypes/#project_legacy_management","text":"description: Documentation that describes the legacy of the project and the data. This may include documents describing policies on how how the project and all related output will be maintained.","title":"project_legacy_management"},{"location":"reference/ref-sources/","text":"","title":"Ref sources"},{"location":"reference/mtypes/","text":"Reference Reference for current metatypes lab project researcher subject","title":"Reference"},{"location":"reference/mtypes/#reference","text":"","title":"Reference"},{"location":"reference/mtypes/#reference-for-current-metatypes","text":"lab project researcher subject","title":"Reference for current metatypes"},{"location":"reference/mtypes/lab/","text":"lab Laboratory Properties members description: Members of the laboratory official_name description: Official name of the laboratory. principal_investigator description: Name of the principal investigator. institute description: Name of the institution. department description: Name of the department. location description: Location of the institute and department. contact_phone description: Contact telephone number. contact_email description: Contact email. contact_website description: Contact website. contact_address description: Contact address.","title":"lab"},{"location":"reference/mtypes/lab/#lab","text":"Laboratory","title":"lab"},{"location":"reference/mtypes/lab/#properties","text":"","title":"Properties"},{"location":"reference/mtypes/lab/#members","text":"description: Members of the laboratory","title":"members"},{"location":"reference/mtypes/lab/#official_name","text":"description: Official name of the laboratory.","title":"official_name"},{"location":"reference/mtypes/lab/#principal_investigator","text":"description: Name of the principal investigator.","title":"principal_investigator"},{"location":"reference/mtypes/lab/#institute","text":"description: Name of the institution.","title":"institute"},{"location":"reference/mtypes/lab/#department","text":"description: Name of the department.","title":"department"},{"location":"reference/mtypes/lab/#location","text":"description: Location of the institute and department.","title":"location"},{"location":"reference/mtypes/lab/#contact_phone","text":"description: Contact telephone number.","title":"contact_phone"},{"location":"reference/mtypes/lab/#contact_email","text":"description: Contact email.","title":"contact_email"},{"location":"reference/mtypes/lab/#contact_website","text":"description: Contact website.","title":"contact_website"},{"location":"reference/mtypes/lab/#contact_address","text":"description: Contact address.","title":"contact_address"},{"location":"reference/mtypes/project/","text":"project Project Properties labs description: List of labs associated with the project. subjects description: List of subjects associated with the project. project_start_date description: Start date of the project. project_end_date description: End date of the project project_lead description: Name of the project leader / person responsible for the project. members description: Members of the project project_manager description: Name of the project manager. data_manager description: Name of the data manager. project_digital_tools description: List of digital tools used in the project. e.g. slack, slab, keeper, trello project_legacy_management description: Documentation that describes the legacy of the project and the data. This may include documents describing policies on how how the project and all related output will be maintained.","title":"project"},{"location":"reference/mtypes/project/#project","text":"Project","title":"project"},{"location":"reference/mtypes/project/#properties","text":"","title":"Properties"},{"location":"reference/mtypes/project/#labs","text":"description: List of labs associated with the project.","title":"labs"},{"location":"reference/mtypes/project/#subjects","text":"description: List of subjects associated with the project.","title":"subjects"},{"location":"reference/mtypes/project/#project_start_date","text":"description: Start date of the project.","title":"project_start_date"},{"location":"reference/mtypes/project/#project_end_date","text":"description: End date of the project","title":"project_end_date"},{"location":"reference/mtypes/project/#project_lead","text":"description: Name of the project leader / person responsible for the project.","title":"project_lead"},{"location":"reference/mtypes/project/#members","text":"description: Members of the project","title":"members"},{"location":"reference/mtypes/project/#project_manager","text":"description: Name of the project manager.","title":"project_manager"},{"location":"reference/mtypes/project/#data_manager","text":"description: Name of the data manager.","title":"data_manager"},{"location":"reference/mtypes/project/#project_digital_tools","text":"description: List of digital tools used in the project. e.g. slack, slab, keeper, trello","title":"project_digital_tools"},{"location":"reference/mtypes/project/#project_legacy_management","text":"description: Documentation that describes the legacy of the project and the data. This may include documents describing policies on how how the project and all related output will be maintained.","title":"project_legacy_management"},{"location":"reference/mtypes/researcher/","text":"researcher Researcher Properties subject_fields description: Subject fields of the researcher. latest_educational_qualification description: Latest educational qualification. education_level description: certifications description: Additional certifications, e.g. FELASA B animal handling course contact_phone description: Contact phone number. contact_email description: Contact email address. contact_website description: Contact website URL. contact_address description: Contact address. projects description: List of projects the researcher is a part of. The index of the projects should match the project_role field below. project_role description: Role of the researcher in the project. sex description: Sex of the subject age description: Age of the subject handedness description: Handedness as self rated by participant handedness_value description: Handedness based on Edinburgh handedness inventory primary_language description: Primary language of the subject secondary_language description: Secondary language of the subject additional_comments description: Additional comments if any.","title":"researcher"},{"location":"reference/mtypes/researcher/#researcher","text":"Researcher","title":"researcher"},{"location":"reference/mtypes/researcher/#properties","text":"","title":"Properties"},{"location":"reference/mtypes/researcher/#subject_fields","text":"description: Subject fields of the researcher.","title":"subject_fields"},{"location":"reference/mtypes/researcher/#latest_educational_qualification","text":"description: Latest educational qualification.","title":"latest_educational_qualification"},{"location":"reference/mtypes/researcher/#education_level","text":"description:","title":"education_level"},{"location":"reference/mtypes/researcher/#certifications","text":"description: Additional certifications, e.g. FELASA B animal handling course","title":"certifications"},{"location":"reference/mtypes/researcher/#contact_phone","text":"description: Contact phone number.","title":"contact_phone"},{"location":"reference/mtypes/researcher/#contact_email","text":"description: Contact email address.","title":"contact_email"},{"location":"reference/mtypes/researcher/#contact_website","text":"description: Contact website URL.","title":"contact_website"},{"location":"reference/mtypes/researcher/#contact_address","text":"description: Contact address.","title":"contact_address"},{"location":"reference/mtypes/researcher/#projects","text":"description: List of projects the researcher is a part of. The index of the projects should match the project_role field below.","title":"projects"},{"location":"reference/mtypes/researcher/#project_role","text":"description: Role of the researcher in the project.","title":"project_role"},{"location":"reference/mtypes/researcher/#sex","text":"description: Sex of the subject","title":"sex"},{"location":"reference/mtypes/researcher/#age","text":"description: Age of the subject","title":"age"},{"location":"reference/mtypes/researcher/#handedness","text":"description: Handedness as self rated by participant","title":"handedness"},{"location":"reference/mtypes/researcher/#handedness_value","text":"description: Handedness based on Edinburgh handedness inventory","title":"handedness_value"},{"location":"reference/mtypes/researcher/#primary_language","text":"description: Primary language of the subject","title":"primary_language"},{"location":"reference/mtypes/researcher/#secondary_language","text":"description: Secondary language of the subject","title":"secondary_language"},{"location":"reference/mtypes/researcher/#additional_comments","text":"description: Additional comments if any.","title":"additional_comments"},{"location":"reference/mtypes/subject/","text":"subject Subject Properties creator description: Person who collected the participant information. person_responsible description: Person who is responsible for the participant information.","title":"subject"},{"location":"reference/mtypes/subject/#subject","text":"Subject","title":"subject"},{"location":"reference/mtypes/subject/#properties","text":"","title":"Properties"},{"location":"reference/mtypes/subject/#creator","text":"description: Person who collected the participant information.","title":"creator"},{"location":"reference/mtypes/subject/#person_responsible","text":"description: Person who is responsible for the participant information.","title":"person_responsible"}]}